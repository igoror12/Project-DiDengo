<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 900 600" width="900" height="600" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><rect x="0" y="0" width="900" height="600" fill="#FFF"/><defs><linearGradient id="grad1_0" x1="33.3%" y1="0%" x2="100%" y2="100%"><stop offset="20%" stop-color="#ff948a" stop-opacity="1"/><stop offset="80%" stop-color="#ff948a" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad1_1" x1="33.3%" y1="0%" x2="100%" y2="100%"><stop offset="20%" stop-color="#ff948a" stop-opacity="1"/><stop offset="80%" stop-color="#ffafa6" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad1_2" x1="33.3%" y1="0%" x2="100%" y2="100%"><stop offset="20%" stop-color="#ffcac3" stop-opacity="1"/><stop offset="80%" stop-color="#ffafa6" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad1_3" x1="33.3%" y1="0%" x2="100%" y2="100%"><stop offset="20%" stop-color="#ffcac3" stop-opacity="1"/><stop offset="80%" stop-color="#ffe5e1" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad1_4" x1="33.3%" y1="0%" x2="100%" y2="100%"><stop offset="20%" stop-color="#ffffff" stop-opacity="1"/><stop offset="80%" stop-color="#ffe5e1" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad2_0" x1="0%" y1="0%" x2="66.7%" y2="100%"><stop offset="20%" stop-color="#ff948a" stop-opacity="1"/><stop offset="80%" stop-color="#ff948a" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad2_1" x1="0%" y1="0%" x2="66.7%" y2="100%"><stop offset="20%" stop-color="#ffafa6" stop-opacity="1"/><stop offset="80%" stop-color="#ff948a" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad2_2" x1="0%" y1="0%" x2="66.7%" y2="100%"><stop offset="20%" stop-color="#ffafa6" stop-opacity="1"/><stop offset="80%" stop-color="#ffcac3" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad2_3" x1="0%" y1="0%" x2="66.7%" y2="100%"><stop offset="20%" stop-color="#ffe5e1" stop-opacity="1"/><stop offset="80%" stop-color="#ffcac3" stop-opacity="1"/></linearGradient></defs><defs><linearGradient id="grad2_4" x1="0%" y1="0%" x2="66.7%" y2="100%"><stop offset="20%" stop-color="#ffe5e1" stop-opacity="1"/><stop offset="80%" stop-color="#ffffff" stop-opacity="1"/></linearGradient></defs><g transform="translate(900, 0)"><path d="M0 351.5C-39.9 332.4 -79.9 313.3 -124 299.3C-168.1 285.4 -216.4 276.5 -248.6 248.6C-280.8 220.6 -296.9 173.6 -311.3 129C-325.8 84.4 -338.7 42.2 -351.5 0L0 0Z" fill="#fff2f0"/><path d="M0 281.2C-32 265.9 -63.9 250.7 -99.2 239.5C-134.5 228.3 -173.1 221.2 -198.9 198.9C-224.6 176.5 -237.5 138.9 -249.1 103.2C-260.7 67.5 -270.9 33.7 -281.2 0L0 0Z" fill="#ffd7d2"/><path d="M0 210.9C-24 199.5 -47.9 188 -74.4 179.6C-100.9 171.2 -129.8 165.9 -149.1 149.1C-168.5 132.4 -178.1 104.1 -186.8 77.4C-195.5 50.6 -203.2 25.3 -210.9 0L0 0Z" fill="#ffbdb4"/><path d="M0 140.6C-16 133 -32 125.3 -49.6 119.7C-67.2 114.1 -86.6 110.6 -99.4 99.4C-112.3 88.3 -118.7 69.4 -124.5 51.6C-130.3 33.7 -135.5 16.9 -140.6 0L0 0Z" fill="#ffa298"/><path d="M0 70.3C-8 66.5 -16 62.7 -24.8 59.9C-33.6 57.1 -43.3 55.3 -49.7 49.7C-56.2 44.1 -59.4 34.7 -62.3 25.8C-65.2 16.9 -67.7 8.4 -70.3 0L0 0Z" fill="#ff948a"/></g><g transform="translate(0, 600)"><path d="M0 -351.5C46.9 -347.3 93.8 -343 134.5 -324.8C175.2 -306.5 209.7 -274.2 240.4 -240.4C271.1 -206.6 298.1 -171.2 316 -130.9C333.9 -90.5 342.7 -45.3 351.5 0L0 0Z" fill="#fff2f0"/><path d="M0 -281.2C37.5 -277.8 75.1 -274.4 107.6 -259.8C140.2 -245.2 167.8 -219.4 192.3 -192.3C216.9 -165.3 238.5 -137 252.8 -104.7C267.1 -72.4 274.2 -36.2 281.2 0L0 0Z" fill="#ffd7d2"/><path d="M0 -210.9C28.1 -208.4 56.3 -205.8 80.7 -194.9C105.1 -183.9 125.8 -164.5 144.2 -144.2C162.7 -124 178.8 -102.7 189.6 -78.5C200.3 -54.3 205.6 -27.2 210.9 0L0 0Z" fill="#ffbdb4"/><path d="M0 -140.6C18.8 -138.9 37.5 -137.2 53.8 -129.9C70.1 -122.6 83.9 -109.7 96.2 -96.2C108.5 -82.6 119.2 -68.5 126.4 -52.4C133.5 -36.2 137.1 -18.1 140.6 0L0 0Z" fill="#ffa298"/><path d="M0 -70.3C9.4 -69.5 18.8 -68.6 26.9 -65C35 -61.3 41.9 -54.8 48.1 -48.1C54.2 -41.3 59.6 -34.2 63.2 -26.2C66.8 -18.1 68.5 -9.1 70.3 0L0 0Z" fill="#ff948a"/></g></svg>